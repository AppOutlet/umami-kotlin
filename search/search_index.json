{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#umami-kotlin","title":"Umami Kotlin","text":"<p>Welcome to the official documentation for <code>umami-kotlin</code>, a simple and powerful library for adding privacy-first analytics to your Kotlin applications.</p> <p>This open-source library makes it easy to interact with the excellent, privacy-focused Umami analytics platform. </p> <p>While born from the need for a unified solution in Kotlin Multiplatform, due its \"multiplatform\" aspect, Umami Kotlin is supported by the following platforms:</p> <ul> <li>\ud83c\udf0eKotlin Multiplatform (iOS, Android, Desktop, WebAssembly, etc.)</li> <li>\ud83e\udd16Android Applications </li> </ul>"},{"location":"#at-a-glance","title":"At a Glance","text":"<p>Adding analytics to your Kotlin project is simple. Here\u2019s a quick look:</p> <pre><code>// Add the dependency in your commonMain build.gradle.kts file\ncommonMain.dependencies {\n    implementation(\"dev.appoutlet:umami:LATEST_VERSION\")\n}\n\n// Initialize the Umami instance with your server URL and website ID\nval umami = Umami(\"your-website-uuid\")\n\n// Track a custom event\nfun whenSomethingHappens() {\n    umami.event(url = \"/screen/main\", name = \"app-launch\")\n}\n</code></pre>"},{"location":"#core-philosophy","title":"Core Philosophy","text":"<ul> <li>\ud83d\udc8e Truly Multiplatform: Write your analytics code once and run it everywhere\u2014Android, iOS, Desktop, server-side (Ktor, SpringBoot, etc.), and any other Java or Kotlin/JVM project.</li> <li>\ud83d\ude80 Lightweight &amp; Simple: A clean, intuitive API. No complex setup, no boilerplate. Just simple function calls designed to get out of your way.</li> <li>\ud83d\udd12 Privacy-Focused: Integrate a powerful analytics tool without compromising your users' data or your principles.</li> </ul>"},{"location":"#ready-to-start","title":"Ready to Start?","text":"<p>Dive into our Get Started guide to add <code>umami-kotlin</code> to your project and track your first event in minutes. Or, if you want to see the source code, check out the project on GitHub.</p> <p>Get Started   View on GitHub </p> <p></p>"},{"location":"#a-project-by-appoutlet","title":"A Project by AppOutlet","text":"<p><code>umami-kotlin</code> is developed and maintained by AppOutlet. You can explore our other projects on our website.</p>"},{"location":"event-tracking/","title":"Event tracking","text":"<p>Once you have configured the <code>Umami</code> client, you can begin tracking user interactions. <code>umami-kotlin</code> provides a straightforward API for sending analytics data to your Umami instance asynchronously, ensuring that tracking calls never block your application's main thread.</p> <p>If you haven't already, please refer to the Get Started guide to set up the <code>Umami</code> client in your project.</p> <p>The library offers two primary functions for this purpose:</p> <ul> <li><code>event()</code>: Used to track page views and custom events. This will be your most commonly used function.</li> <li><code>identify()</code>: Used to send specific data to identify a user and create a new session. (optional)</li> </ul> <p>Info</p> <p>Both <code>event()</code> and <code>identify()</code> are regular (non-suspend) functions. They queue work internally and return immediately without blocking.</p>"},{"location":"event-tracking/#tracking-page-views-and-custom-events","title":"Tracking Page Views and Custom Events","text":"<p>The <code>event()</code> function is the universal method for sending most tracking data. You can use it to record a simple page view, a specific user interaction (like a button click), or both at the same time.</p> <pre><code>fun event(\n    referrer: String? = null,\n    title: String? = null,\n    url: String? = null,\n    name: String? = null,\n    data: Map&lt;String, Any&gt;? = null,\n    tag: String? = null,\n    timestamp: Long = now(),\n    id: String? = null\n)\n</code></pre>"},{"location":"event-tracking/#parameters","title":"Parameters","text":"<ul> <li><code>referrer</code> (String): The URL of the page that referred the user to the current page.</li> <li><code>title</code> (String): The title of the page being viewed.</li> <li><code>url</code> (String): The URL of the page. This is the primary field for tracking a page view.</li> <li><code>name</code> (String): The name of the custom event. This is the primary field for tracking a custom event.</li> <li><code>data</code> (Map): A map of additional, custom data to associate with the event.</li> <li><code>tag</code> (String): A tag to categorize the event.</li> <li><code>timestamp</code> (Long): The timestamp of when the event occurred, in seconds since the epoch. Defaults to the current time.</li> <li><code>id</code> (String): A unique identifier for the event.</li> </ul> <p>Info</p> <p>Please refer to the full event method specification for more details.</p>"},{"location":"event-tracking/#usage-examples","title":"Usage Examples","text":"<p>1. Tracking a Page View To track a page view, provide a <code>url</code> and an optional <code>title</code>.</p> <pre><code>// Track a user navigating to the \"Settings\" screen\numami.event(url = \"/settings\", title = \"User Settings\")\n</code></pre> <p>2. Tracking a Custom Event To track a specific interaction, like a user clicking a button, provide a <code>name</code>. You can also include custom <code>data</code> for more context.</p> <pre><code>// Track a user completing a purchase\numami.event(\n    name = \"purchase-completed\",\n    data = mapOf(\n        \"plan\" to \"premium\",\n        \"price\" to 49.99\n    )\n)\n</code></pre>"},{"location":"event-tracking/#identifying-a-user","title":"Identifying a User","text":"<p>The <code>identify()</code> function is a specialized method used to associate custom data with the current user's session. This is useful for enriching your analytics with session-specific information.</p> <pre><code>fun identify(\n    data: Map&lt;String, Any&gt;,\n    timestamp: Long = now(),\n    id: String? = null\n)\n</code></pre>"},{"location":"event-tracking/#parameters_1","title":"Parameters","text":"<ul> <li><code>data</code> (Map): The map of custom data you want to associate with the user's session.</li> <li><code>timestamp</code> (Long): The timestamp of when the identification occurred. Defaults to the current time.</li> <li><code>id</code> (String): A unique identifier for the event.</li> </ul> <p>Info</p> <p>Please refer to the full identify method specification for more details.</p>"},{"location":"event-tracking/#usage-example","title":"Usage Example","text":"<pre><code>// Identify the user with their account type after they log in\numami.identify(data = mapOf(\"account_type\" to \"pro_user\"))\n</code></pre>"},{"location":"event-tracking/#asynchronous-processing","title":"Asynchronous Processing","text":"<p>It's important to understand that all event tracking in <code>umami-kotlin</code> is handled asynchronously. When you call <code>event()</code> or <code>identify()</code>, the payload is not sent to the network immediately on the calling thread.</p> <p>Instead, the event is placed into an internal queue (a Kotlin <code>Channel</code>). A dedicated background process consumes items from this queue one by one and sends them to the Umami server.</p> <p>This design ensures that your analytics calls are non-blocking and have a minimal performance impact on your application, which is especially critical for maintaining a responsive UI on the main thread.</p>"},{"location":"event-tracking/#a-note-on-future-updates","title":"A Note on Future Updates","text":"<p>Currently, events are processed sequentially. Batch processing of events (sending multiple events in a single network request) is a planned future enhancement to further improve network efficiency.</p>"},{"location":"roadmap/","title":"Roadmap","text":"<p>This document outlines the current development status and future plans for the Umami API. It is intended for developers who are using or contributing to this library.</p>"},{"location":"roadmap/#umami-api","title":"Umami API","text":"<ul> <li> Send tracking event data - <code>POST /api/send</code></li> <li> Login user - <code>POST /api/auth/login</code></li> <li> Verify authentication token - <code>POST /api/auth/verify</code></li> <li> Get all users (admin) - <code>GET /api/admin/users</code></li> <li> Get user details - <code>GET /api/users/:userId</code></li> <li> Update user details - <code>POST /api/users/:userId</code></li> <li> Delete user - <code>DELETE /api/users/:userId</code></li> <li> Get websites for a user - <code>GET /api/users/:userId/websites</code></li> <li> Get teams for a user - <code>GET /api/users/:userId/teams</code></li> <li> Create a new team - <code>POST /api/teams</code></li> <li> Join an existing team - <code>POST /api/teams/join</code></li> <li> Get team details - <code>GET /api/teams/:teamId</code></li> <li> Update team details - <code>POST /api/teams/:teamId</code></li> <li> Delete team - <code>DELETE /api/teams/:teamId</code></li> <li> Get users in a team - <code>GET /api/teams/:teamId/users</code></li> <li> Add user to a team - <code>POST /api/teams/:teamId/users</code></li> <li> Get specific user in a team - <code>GET /api/teams/:teamId/users/:userId</code></li> <li> Update user role/permissions in a team - <code>POST /api/teams/:teamId/users/:userId</code></li> <li> Remove user from a team - <code>DELETE /api/teams/:teamId/users/:userId</code></li> <li> Get websites for a team - <code>GET /api/teams/:teamId/websites</code></li> <li> Get events for a website - <code>GET /api/websites/:websiteId/events</code></li> <li> Get detailed event data for a website - <code>GET /api/websites/:websiteId/event-data/events</code></li> <li> Get fields for event data of a website - <code>GET /api/websites/:websiteId/event-data/fields</code></li> <li> Get values for event data fields of a website - <code>GET /api/websites/:websiteId/event-data/values</code></li> <li> Get statistics for event data of a website - <code>GET /api/websites/:websiteId/event-data/stats</code></li> <li> Get sessions for a website - <code>GET /api/websites/:websiteId/sessions</code></li> <li> Get statistics for sessions of a website - <code>GET /api/websites/:websiteId/sessions/stats</code></li> <li> Get details for a specific session - <code>GET /api/websites/:websiteId/sessions/:sessionId</code></li> <li> Get activity for a specific session - <code>GET /api/websites/:websiteId/sessions/:sessionId/activity</code></li> <li> Get properties for a specific session - <code>GET /api/websites/:websiteId/sessions/:sessionId/properties</code></li> <li> Get properties for session data of a website - <code>GET /api/websites/:websiteId/session-data/properties</code></li> <li> Get values for session data properties - <code>GET /api/websites/:websiteId/session-data/values</code></li> <li> Get all websites - <code>GET /api/websites</code></li> <li> Create a new website - <code>POST /api/websites</code></li> <li> Get website details - <code>GET /api/websites/:websiteId</code></li> <li> Update website details - <code>POST /api/websites/:websiteId</code></li> <li> Delete website - <code>DELETE /api/websites/:websiteId</code></li> <li> Reset website data - <code>POST /api/websites/:websiteId/reset</code></li> <li> Get active user count for a website - <code>GET /api/websites/:websiteId/active</code></li> <li> Get events for a website (Note: duplicate) - <code>GET /api/websites/:websiteId/events</code></li> <li> Get pageviews for a website - <code>GET /api/websites/:websiteId/pageviews</code></li> <li> Get metrics for a website - <code>GET /api/websites/:websiteId/metrics</code></li> <li> Get summary statistics for a website - <code>GET /api/websites/:websiteId/stats</code></li> </ul>"},{"location":"getstarted/android/","title":"Setting up Umami Kotlin on Android applications","text":"<p>This guide walks you through installing <code>umami-kotlin</code> in a pure Android (single-platform) project, configuring the client, and tracking your first event.</p> <p>Already using Kotlin Multiplatform?</p> <p>See the KMP Get Started guide instead. This page focuses on a standard Android-only module.</p>"},{"location":"getstarted/android/#1-add-the-dependency","title":"1. Add the Dependency","text":"<p>The library is published on Maven Central:</p> <p></p> <p>Add the dependency to your Android app module <code>build.gradle.kts</code> (or <code>build.gradle</code>). Replace <code>LATEST_VERSION</code> with the version shown in the badge above.</p> Kotlin DSLGroovy DSL app/build.gradle.kts<pre><code>dependencies {\n    implementation(\"dev.appoutlet:umami:LATEST_VERSION\")\n}\n</code></pre> app/build.gradle<pre><code>dependencies {\n    implementation \"dev.appoutlet:umami:LATEST_VERSION\"\n}\n</code></pre>"},{"location":"getstarted/android/#using-a-version-catalog-recommended","title":"Using a Version Catalog (Recommended)","text":"<p>If you manage dependencies with a <code>libs.versions.toml</code> catalog:</p> gradle/libs.versions.toml<pre><code>[versions]\numami = \"LATEST_VERSION\" # Replace with the latest version\n\n[libraries]\numami = { group = \"dev.appoutlet\", name = \"umami\", version.ref = \"umami\" }\n</code></pre> <p>Then in your module build file: app/build.gradle.kts<pre><code>dependencies {\n    implementation(libs.umami)\n}\n</code></pre></p> <p>This keeps upgrades centralized\u2014just bump the <code>umami</code> version in the catalog.</p>"},{"location":"getstarted/android/#2-ensure-internet-permission","title":"2. Ensure Internet Permission","text":"<p>Most apps already have this, but confirm your <code>AndroidManifest.xml</code> includes: <pre><code>&lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n</code></pre></p>"},{"location":"getstarted/android/#3-get-your-website-id","title":"3. Get Your Website ID","text":"<p>From your Umami dashboard:</p> <ol> <li>Open the website you want to track.</li> <li>Copy its Website ID (a UUID).</li> <li>If you self\u2011host Umami, note your base domain (e.g. <code>https://analytics.mycompany.com</code>). If you use Umami Cloud you can omit <code>baseUrl</code> (it defaults internally).</li> </ol>"},{"location":"getstarted/android/#4-create-a-singleton-umami-client","title":"4. Create a Singleton Umami Client","text":"<p>Create the client once and reuse it. A convenient place is a custom <code>Application</code> class or your DI container.</p>"},{"location":"getstarted/android/#simple-application-level-singleton","title":"Simple Application-level Singleton","text":"<p>MyApp.kt<pre><code>class MyApp : Application() {\n    lateinit var umami: Umami\n        private set\n\n    override fun onCreate() {\n        super.onCreate()\n        umami = Umami(\"YOUR-WEBSITE-UUID\") {\n            // baseUrl(\"https://your-self-hosted-instance\") // Only if self-hosting\n        }\n    }\n}\n</code></pre> Register it in <code>AndroidManifest.xml</code>: <pre><code>&lt;application\n    android:name=\".MyApp\"\n    ... &gt;\n&lt;/application&gt;\n</code></pre> Access it anywhere: <pre><code>val umami = (applicationContext as MyApp).umami\n</code></pre></p>"},{"location":"getstarted/android/#using-hilt-optional","title":"Using Hilt (Optional)","text":"<p>AnalyticsModule.kt<pre><code>@Module\n@InstallIn(SingletonComponent::class)\nobject AnalyticsModule {\n    @Provides\n    @Singleton\n    fun provideUmami(): Umami = Umami(\"YOUR-WEBSITE-UUID\") {\n        // baseUrl(\"https://your-self-hosted-instance\")\n    }\n}\n</code></pre> Inject where needed: <pre><code>@AndroidEntryPoint\nclass MainActivity : ComponentActivity() {\n    @Inject lateinit var umami: Umami\n    ...\n}\n</code></pre></p>"},{"location":"getstarted/android/#5-track-your-first-event","title":"5. Track Your First Event","text":"<p>The tracking APIs (<code>event()</code> and <code>identify()</code>) are regular (non-suspend) functions. They enqueue work asynchronously, so it's safe to call them directly on the main thread\u2014no coroutine or background dispatch required.</p>"},{"location":"getstarted/android/#track-a-screen-view-page-view-analogy","title":"Track a Screen View (Page View Analogy)","text":"<pre><code>class MainActivity : ComponentActivity() {\n    @Inject lateinit var umami: Umami\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent { /* UI */ }\n\n        // Non-blocking call\n        umami.event(url = \"/main\", title = \"Main Screen\")\n    }\n}\n</code></pre>"},{"location":"getstarted/android/#track-a-custom-event","title":"Track a Custom Event","text":"<pre><code>umami.event(\n    name = \"purchase_completed\",\n    data = mapOf(\n        \"plan\" to \"pro\",\n        \"price\" to 49.99\n    )\n)\n</code></pre>"},{"location":"getstarted/android/#identify-a-user-session-enrichment","title":"Identify a User / Session Enrichment","text":"<pre><code>umami.identify(data = mapOf(\"account_type\" to \"pro_user\"))\n</code></pre> <p>Info</p> <p>The calls return immediately; events are placed into an internal queue and processed off the main thread. See detailed parameter explanations on the Event Tracking page.</p>"},{"location":"getstarted/android/#6-optional-configuration","title":"6. Optional Configuration","text":"<p>All optional parameters can be set inside the <code>Umami</code> constructor lambda.</p> Parameter Type Purpose When to change <code>baseUrl(String)</code> Function Your own Umami instance Self-hosted installs <code>hostname(String)</code> Function Override site host Multi-domain analytics <code>language(String)</code> Function User locale Provide when not derivable platform-side <code>screenSize(String)</code> Function Screen resolution You collect manually; optional <code>ip(String)</code> Function Override IP Rare (server-side forwarding) <code>userAgent</code> <code>String</code> Custom UA string Simulator/test tagging <code>eventQueueCapacity</code> <code>Int</code> Channel size High-volume burst events <code>httpClientEngine</code> <code>HttpClientEngine</code> Ktor HTTP engine Platform-specific needs (e.g., custom proxy) <code>coroutineScope</code> <code>CoroutineScope</code> Background task scope Integrate with app's lifecycle <code>logger</code> <code>UmamiLogger</code> Logging backend Custom logging or disabling logs <p>Example with common parameters: <pre><code>import android.content.res.Resources\nimport java.util.Locale\n\nval umami = Umami(\"YOUR-WEBSITE-UUID\") {\n    baseUrl(\"https://analytics.example.com\") // Only for self-hosted\n    language(Locale.getDefault().toLanguageTag())\n    screenSize(\"${Resources.getSystem().displayMetrics.widthPixels}x${Resources.getSystem().displayMetrics.heightPixels}\")\n    eventQueueCapacity = 50\n}\n</code></pre></p>"},{"location":"getstarted/android/#type-safe-constructor","title":"Type-safe constructor","text":"<p>If you already have domain objects (e.g., <code>Uuid</code>, <code>Hostname</code>), you can use the primary constructor for type safety. This is useful if you validate these values elsewhere.</p> <p><pre><code>import dev.appoutlet.umami.Umami\nimport dev.appoutlet.umami.domain.Hostname\nimport dev.appoutlet.umami.domain.Language\nimport dev.appoutlet.umami.domain.ScreenSize\nimport kotlin.uuid.Uuid\n\nval umamiTypeSafe = Umami(Uuid.parse(\"YOUR-WEBSITE-UUID\")) {\n    hostname = Hostname(\"example.com\")\n    language = Language(\"en-US\")\n    screenSize = ScreenSize(1080, 2400)\n    eventQueueCapacity = 50\n}\n</code></pre> Both approaches are functionally equivalent. The string-based constructor just handles parsing for you.</p>"},{"location":"getstarted/android/#7-threading-performance","title":"7. Threading &amp; Performance","text":"<p>Events are queued internally (Kotlin <code>Channel</code>) and processed off the main thread using Ktor. Your UI stays responsive, and you can fire events freely\u2014even during transitions.</p>"},{"location":"getstarted/android/#8-next-steps","title":"8. Next Steps","text":"<ul> <li>Dive deeper into Event Tracking</li> <li>Explore the generated API docs in the Reference section.</li> </ul> <p>You're all set\u2014start capturing meaningful insights from your Android app!</p>"},{"location":"getstarted/kmp/","title":"Track your first event in a Kotlin Multiplatform (KMP) application","text":"<p>This guide is fully focused on adding analytics with <code>umami-kotlin</code> to a shared Kotlin Multiplatform codebase (Android, iOS, Desktop, Web, etc.). You'll add the dependency to <code>commonMain</code>, configure a cross-platform singleton, and track your first events from shared code.</p>"},{"location":"getstarted/kmp/#1-supported-targets","title":"1. Supported targets","text":"<p><code>umami-kotlin</code> is published as a Multiplatform library and can be used from:</p> <ul> <li>Android (JVM / Compose Multiplatform)</li> <li>iOS (via Kotlin/Native; accessible from Swift/Objective-C)</li> <li>Desktop (JVM)</li> <li>JavaScript / WASM (where Ktor HTTP engine is available)</li> <li>Other native targets (Linux, macOS, Windows) as enabled by your KMP setup</li> </ul>"},{"location":"getstarted/kmp/#2-add-the-dependency-commonmain","title":"2. Add the dependency (commonMain)","text":"<p>Add the library to the <code>commonMain</code> source set so all platforms can access it.</p> composeApp/build.gradle.ktsVersion Catalog (libs.versions.toml) <pre><code>kotlin {\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                implementation(\"dev.appoutlet:umami:LATEST_VERSION\")\n            }\n        }\n    }\n}\n</code></pre> <p><pre><code>[versions]\numami = \"LATEST_VERSION\" # Replace with latest\n\n[libraries]\numami = { group = \"dev.appoutlet\", name = \"umami\", version.ref = \"umami\" }\n</code></pre> composeApp/build.gradle.kts<pre><code>kotlin {\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                implementation(libs.umami)\n            }\n        }\n    }\n}\n</code></pre></p> <p>Note</p> <p>Make sure you refresh/Sync Gradle after adding the dependency so the IDE recognizes the API across all targets.</p>"},{"location":"getstarted/kmp/#3-create-a-shared-analytics-singleton","title":"3. Create a shared analytics singleton","text":"<p>Define a single instance in shared code so every platform uses the same configuration.</p> <pre><code>// shared/src/commonMain/kotlin/analytics/Analytics.kt\npackage analytics\n\nimport dev.appoutlet.umami.Umami\n\nobject AnalyticsService {\n    // Basic factory usage (parses strings internally)\n    val umami: Umami = Umami(\"YOUR-WEBSITE-UUID\") {\n        // baseUrl(\"https://your-self-hosted-instance\") // Only if self-hosting\n    }\n\n    fun trackAppLaunch() = umami.event(url = \"/launch\", title = \"App Launch\")\n}\n</code></pre>"},{"location":"getstarted/kmp/#type-safe-constructor","title":"Type-safe constructor","text":"<p>If you already validate inputs (e.g. UUID, hostname) you can use the primary constructor with domain objects: <pre><code>import dev.appoutlet.umami.Umami\nimport kotlin.uuid.Uuid\n\nval umamiTypeSafe = Umami(Uuid.parse(\"YOUR-WEBSITE-UUID\")) {\n    baseUrl(\"https://analytics.example.com\")\n    hostname(\"example.com\")\n    language(\"en-US\")\n    screenSize(\"1080x1920\")\n    eventQueueCapacity = 50\n}\n</code></pre> Both approaches are functionally equivalent; the string-based constructor just wraps parsing.</p>"},{"location":"getstarted/kmp/#using-koin-dependency-injection","title":"Using Koin (Dependency Injection)","text":"<p>If you prefer DI, define a Koin module in <code>commonMain</code>: <pre><code>// shared/src/commonMain/kotlin/di/AnalyticsModule.kt\npackage di\n\nimport dev.appoutlet.umami.Umami\nimport org.koin.dsl.module\n\nval analyticsModule = module {\n    single { Umami(\"YOUR-WEBSITE-UUID\") }\n}\n</code></pre> Start Koin in each platform's entry point (example Android shown; do similarly for iOS/Desktop): <pre><code>// Android example (e.g. in Application.onCreate)\nstartKoin { modules(analyticsModule) }\n</code></pre> Inject where needed in shared code by implementing <code>KoinComponent</code>: <pre><code>// shared/src/commonMain/kotlin/analytics/AnalyticsFacade.kt\npackage analytics\n\nimport dev.appoutlet.umami.Umami\nimport org.koin.core.component.KoinComponent\nimport org.koin.core.component.inject\n\nobject AnalyticsFacade : KoinComponent {\n    private val umami: Umami by inject()\n    fun trackAppLaunch() = umami.event(url = \"/launch\", title = \"App Launch\")\n}\n</code></pre></p>"},{"location":"getstarted/kmp/#4-track-events-from-shared-code","title":"4. Track events from shared code","text":"<p>The primary tracking functions are regular (non-suspend) and return immediately:</p> <ul> <li><code>event()</code> \u2013 Page views + custom events</li> <li><code>identify()</code> \u2013 Attach metadata to a session (optional)</li> </ul> <pre><code>AnalyticsService.umami.event(url = \"/home\", title = \"Home Screen\")\nAnalyticsService.umami.event(name = \"button_clicked\", data = mapOf(\"id\" to \"save\"))\nAnalyticsService.umami.identify(data = mapOf(\"plan\" to \"pro\"))\n</code></pre> <p>You can wrap these in your own domain API to centralize naming or tagging conventions.</p>"},{"location":"getstarted/kmp/#koin-usage-example","title":"Koin usage example","text":"<p>If using the Koin setup above: <pre><code>// Simple wrapper using injected instance\nobject EventTracker : org.koin.core.component.KoinComponent {\n    private val umami: dev.appoutlet.umami.Umami by inject()\n\n    fun trackHome() = umami.event(url = \"/home\", title = \"Home Screen\")\n    fun trackButton(id: String) = umami.event(name = \"button_clicked\", data = mapOf(\"id\" to id))\n    fun identifyPlan(plan: String) = umami.identify(data = mapOf(\"plan\" to plan))\n}\n\n// Usage\nEventTracker.trackHome()\nEventTracker.trackButton(\"save\")\nEventTracker.identifyPlan(\"pro\")\n</code></pre></p>"},{"location":"getstarted/kmp/#5-asynchronous-processing-model","title":"5. Asynchronous processing model","text":"<p>Calls to <code>event()</code> / <code>identify()</code> enqueue a request into an internal Kotlin <code>Channel</code> (capacity default = 25). A background coroutine (on <code>Dispatchers.Default</code>) processes each item sequentially using Ktor. Your UI / main thread is never blocked.</p> <p>Key points: * If the queue is full, producers suspend until space is available (rare in typical UI usage). * Events are sent in order of invocation.</p> <p>To tune throughput: <pre><code>val umamiCustom = Umami(\"...\") {\n    eventQueueCapacity = 100\n}\n</code></pre></p>"},{"location":"getstarted/kmp/#6-optional-configuration","title":"6. Optional configuration","text":"<p>All optional parameters can be set inside the <code>Umami</code> constructor lambda.</p> Parameter Type Purpose When to change <code>baseUrl(String)</code> Function Your own Umami instance Self-hosted installs <code>hostname(String)</code> Function Override site host Multi-domain analytics <code>language(String)</code> Function User locale Provide when not derivable platform-side <code>screenSize(String)</code> Function Screen resolution You collect manually; optional <code>ip(String)</code> Function Override IP Rare (server-side forwarding) <code>userAgent</code> <code>String</code> Custom UA string Simulator/test tagging <code>eventQueueCapacity</code> <code>Int</code> Channel size High-volume burst events <code>httpClientEngine</code> <code>HttpClientEngine</code> Ktor HTTP engine Platform-specific needs (e.g., custom proxy) <code>coroutineScope</code> <code>CoroutineScope</code> Background task scope Integrate with app's lifecycle <code>logger</code> <code>UmamiLogger</code> Logging backend Custom logging or disabling logs <p>Example adding language &amp; dynamic screen size (Android + Desktop differences handled via expect/actual): <pre><code>// commonMain\nexpect fun currentScreenSize(): String\nexpect fun currentLanguageTag(): String\n\nval umami = Umami(\"YOUR-WEBSITE-UUID\") {\n    language(currentLanguageTag())\n    screenSize(currentScreenSize())\n}\n</code></pre> <pre><code>// androidMain\nactual fun currentScreenSize(): String = \"1080x2400\"\nactual fun currentLanguageTag(): String = java.util.Locale.getDefault().toLanguageTag()\n</code></pre> <pre><code>// iosMain\nimport platform.UIKit.UIScreen\nimport platform.Foundation.NSLocale\nimport platform.Foundation.currentLocale\n\nactual fun currentScreenSize(): String {\n    val bounds = UIScreen.mainScreen.bounds\n    return \"${'$'}{bounds.size.width.toInt()}x${'$'}{bounds.size.height.toInt()}\"\n}\nactual fun currentLanguageTag(): String = NSLocale.currentLocale.languageCode\n</code></pre></p>"},{"location":"getstarted/kmp/#7-next-steps","title":"7. Next steps","text":"<ul> <li>Explore Event tracking details</li> </ul> <p>You're ready to gather cross-platform usage insights with a single analytics layer.</p>"}]}